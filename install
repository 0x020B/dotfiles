#!/usr/bin/zsh
# vim: set ft=sh ts=4 sw=4 et:

# 安装系统所用的硬盘
disk='/dev/sda'
# 默认用户名称
user='n0tr00t'
# 默认用户密码
pass='1145141919810'

# 当前进程可用的处理器数
nproc=$(nproc)

if ! sha512sum -c sha512sums; then
    pacman -Sy --needed --noconfirm git
    if [ ! -f id_ed25519 ]; then
        # 写死IP地址，对抗DNS污染
        grep  -Fq   'raw.githubusercontent.com' /etc/hosts \
            || echo '185.199.109.133 raw.githubusercontent.com' >>/etc/hosts
        curl  -O    'https://raw.githubusercontent.com/n0tr00teuorg/dotfiles/main/id_ed25519'
        chmod -v 0600 id_ed25519
    fi
    # 写死GitHub的指纹，用于初次免验证，且更安全
    echo 'github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl' >~/.ssh/known_hosts
    # 使用SSH协议更容易通过墙
    GIT_SSH_COMMAND="ssh -i $(pwd)/id_ed25519" \
        git clone git@github.com:n0tr00teuorg/dotfiles --depth 1
    cd dotfiles
    ./install 2>&1 | tee install.log
    exit
fi

# 启用扩展glob语法
setopt EXTENDED_GLOB

# 分区
sfdisk --delete "$disk"
shred -zvs 251M "$disk"
parted -sa opt  "$disk"             \
    mklabel gpt                     \
    mkpart  esp     fat32   1M 250M \
    mkpart  primary btrfs 250M 100%
mkfs.fat -vF 32 "$disk"1

# 磁盘加密
dd bs=512 count=4 if=/dev/random of=fs.key iflag=fullblock
cryptsetup -vq luksFormat "$disk"2    fs.key
cryptsetup -v  open       "$disk"2 -d fs{.key,}

# Btrfs 配置，子卷管理和分区挂载
mkfs.btrfs -vfn 32k /dev/mapper/fs
mount -vo compress=lzo /dev/mapper/fs /mnt
echo -n ,etc,home,opt,usr,var | xargs -P$nproc -i -d, btrfs -v subvolume create /mnt/@{}
umount -v /mnt
mount  -vo noatime,nodiratime,compress=lzo,subvol=@ /dev/mapper/fs /mnt
mkdir  -v /mnt/{boot,etc,home,opt,usr,var}
mount  -vo noatime,nodiratime "$disk"1 /mnt/boot
echo -n  etc,home,opt,usr,var | xargs -P$nproc -i -d, \
    mount -vo noatime,nodiratime,compress=lzo,subvol=@{} /dev/mapper/fs /mnt/{}
chattr +C /mnt/var

# 自动计算交换文件所需要的大小
mem=$(($(grep 'MemTotal' /proc/meminfo | awk '{print $2}') >> 20))
if [[ $mem < 16 ]]; then
    size=$(($mem * 2))
    [[ $size > 8 ]] && size=8
    avail=$(df -BG --output=avail /dev/mapper/fs | tail -n1)
    if [[ $((size * 8)) < ${avail%G*} ]]; then
        # 创建交换文件
        truncate  -s 0 /mnt/var/swap
        fallocate -l   "$size"G /mnt/var/swap
        chmod -v 0600  /mnt/var/swap
        mkswap         /mnt/var/swap
        swapon         /mnt/var/swap
    fi
fi

keys=(07C1003E46490054A20D3A8E250A4BA6630FD7F1	# selinux
      882DCFE48E2051D48E2562ABF3B607488DB35A47	# cachyos
      A3873AB27021C5DD39E0501AFBA220DFC880C036	# alhp & chaotic-aur
      CCED9BE21E1173C61DC1C9407931B6D628C8D3BA	# arch4edu
      F9A6E68A711354D84A9B91637533BAFE69A25079)	# blackarch

keyrings=('arch4edu-keyring'
          'archlinuxcn-keyring'
          'blackarch-keyring'
          'cachyos-keyring'
          'chaotic-keyring')

mirrorlists=('archlinuxcn-mirrorlist-git'
             'blackarch-mirrorlist'
             'cachyos-mirrorlist'
             'chaotic-mirrorlist'
             'mirrorlist.arch4edu'
             'selinux-mirrorlist')

# 密钥环初始化
cp -vfr etc/pacman.d/* /etc/pacman.d/
pacman-key --verbose --init
pacman-key --verbose --import .
pacman-key --verbose --lsign-key $keys
pacman-key --verbose --populate

# 准备镜像列表
pacman -S --needed --noconfirm pacman-contrib  # 软件源测速排序需要 rankmirrors
cp -vfb {,/}etc/pacman.conf
v=$(/usr/lib/ld-linux-x86-64.so.2 --help | grep -Po '(?<=x86-64-v).(?= \(supported)')
if [[ $v =~ 4 ]]; then
    mirrorlists+='cachyos-v4-mirrorlist'
    cat etc/pacman_v4.conf   >> /etc/pacman.conf
fi
if [[ $v =~ 3 ]]; then
    keyrings+='alhp-keyring'
    mirrorlists+=('alhp-mirrorlist' 'cachyos-v3-mirrorlist')
    cat etc/pacman_v3.conf   >> /etc/pacman.conf
fi
cat etc/pacman_baseline.conf >> /etc/pacman.conf
pacman -Sy --needed --noconfirm --overwrite "*" $keyrings
pacman -S  --needed --noconfirm --overwrite "*" $mirrorlists

# 还原配置
cp -rvf etc/^pacman*  "/mnt/etc"
cp -rv  home/.        "/mnt/home/$user"
chown -Rvh 1000:998   "/mnt/home/$user"
chmod -R  g-rwx,o-rwx "/mnt/home/$user"
chmod -Rv g-rwx,o-rwx "/mnt/boot"
install -Dm600 fs.key /mnt/etc/cryptsetup-keys.d/fs.key
mkdir -pv /mnt/usr/lib/initcpio/install
cat > /mnt/usr/lib/initcpio/install/fstab << EOF
#!/bin/bash
build() {
    local rules unit
    [[ -f /etc/fstab.initramfs ]] && add_file "/etc/fstab.initramfs" "/etc/fstab"
}
EOF

# 创建分区表
echo "fs $disk"2                                   >>/mnt/etc/crypttab.initramfs
genfstab -L /mnt/etc | sed -E  '/^(#.*)?$/d'       \
                     | sed 's#\t/#\t/sysroot/etc#' >>/mnt/etc/fstab.initramfs
genfstab -L /mnt/usr | sed -E  '/^(#.*)?$/d'       \
                     | sed 's#\t/#\t/sysroot/usr#' >>/mnt/etc/fstab.initramfs
genfstab -L /mnt     | sed -E  '/^(#.*)?$/d'       >>/mnt/etc/fstab

# 安装汐统
sed -i 's#/mirrorlist#/*#g' /usr/bin/pacstrap
pacstrap -P /mnt $keyrings $mirrorlists $(<packages.txt)

# 将系统时钟设置到硬件时钟
hwclock --systohc --adjfile /mnt/etc/adjtime &

# 新建用户
useradd -mg wheel -G seat -s /usr/bin/zsh "$user" -P /mnt

# 修改密码
echo -n "$user:$pass" | arch-chroot /mnt chpasswd -c YESCRYPT

ln -sv /usr/bin/nvim /mnt/usr/bin/vi
for service in 'dhcpcd' 'seatd' 'rngd'
do
    ln -sv /usr/lib/systemd/system/$service.service \
           /mnt/etc/systemd/system/multi-user.target.wants/$service.service &
done

# TODO: UEFI安全启动
#uuidgen --random > GUID.txt
#for key in 'PK' 'KEK' 'db'
#do
#    openssl req -newkey rsa:4096 -nodes -keyout $key.key -new -x509 -sha512 -days 3650 -subj '/CN=12339/' -out $key.crt
#    openssl x509 -outform DER -in $key.crt -out $key.cer
#    cert-to-efi-sig-list -g "$(< GUID.txt)" $key.crt $key.esl
#done
#sign-efi-sig-list -g "$(< GUID.txt)" -k PK.key -c PK.crt PK PK.esl PK.auth
#sign-efi-sig-list -g "$(< GUID.txt)" -k PK.key -c PK.crt KEK KEK.esl KEK.auth
#sign-efi-sig-list -g "$(< GUID.txt)" -k KEK.key -c KEK.crt db db.esl db.auth
#sbsign --key db.key --cert db.crt --output /boot/vmlinuz-linux-zen{,}

# 配置引导
efibootmgr | grep  -Po '(?<=Boot)....(?=\*? Boot with standard options)' \
           | xargs -P$nproc -i efibootmgr -Bb {}
efibootmgr -cd "$disk" -L 'Boot with standard options' -l linux-zen.efi -u
efibootmgr -ab  $(efibootmgr | grep -Pom 1 '(?<=Boot)....(?=\*? Boot with standard options)')

# 允许15秒内终止脚本执行进行debug
sleep 15
[ -f install.log ]   && mv -v install.log /mnt/boot
[ -f /mnt/var/swap ] && swapoff -v        /mnt/var/swap
umount -Rv /mnt
cryptsetup -v close fs
reboot
