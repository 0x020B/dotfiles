#!/usr/bin/zsh
# 安装系统所用的分区
disk='/dev/sda'
# 交换文件路径(SELINUX策略包refpolicy-arch和refpolicy-git的交换文件路径默认用/var/swap)
swapfile='/mnt/var/swap'
# 当前进程可用的处理器数
nproc=$(nproc)

if ! sha512sum -c sha512sums; then
	git -v 2>/dev/null || pacman -Sy --noconfirm git
	if [ ! -f id_ed25519 ]; then
		# 写死IP地址，对抗DNS污染
		grep -Fq 'raw.githubusercontent.com' /etc/hosts \
			|| echo '185.199.109.133 raw.githubusercontent.com' >>/etc/hosts
		curl -O 'https://raw.githubusercontent.com/n0tr00teuorg/dotfiles/main/id_ed25519'
		chmod -v 0600 id_ed25519
	fi
	# 写死GitHub的指纹，用于初次免验证，且更安全
	echo 'github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl' >~/.ssh/known_hosts
	# 使用SSH协议更容易通过墙
	GIT_SSH_COMMAND="ssh -i $(pwd)/id_ed25519" git clone git@github.com:n0tr00teuorg/dotfiles --depth 1
	cd dotfiles
	sh install
else
	# 分区
	sfdisk --delete "$disk"
	parted -sa opt "$disk" \
		mklabel gpt \
		mkpart  esp     fat32   1M 513M \
		mkpart  primary btrfs 513M 100%

	# Btrfs 配置
	mkfs.btrfs -fn 32k "$disk"2
	mount -vo compress=lzo "$disk"2 /mnt
	echo -n ,home,opt,usr,var | xargs -P$nproc -i -d, btrfs -v subvolume create /mnt/@{}
	umount /mnt

	# 挂载分区及子卷
	mount -vo noatime,nodiratime,compress=lzo,subvol=@ "$disk"2 /mnt
	mkdir -v /mnt/{boot,home,opt,usr,var}
	mount -vo noatime,nodiratime "$disk"1 /mnt/boot
	echo -n home,opt,usr,var | xargs -P$nproc -i -d, \
		mount -vo noatime,nodiratime,compress=lzo,subvol=@{} "$disk"2 /mnt/{}
	chattr +C /mnt/var

	# 自动计算交换文件所需要的大小
	mem=$(($(grep 'MemTotal' /proc/meminfo | awk '{print $2}') >> 20))
	if [[ $mem < 16 ]]; then
		size=$(($mem * 2))
		[[ $size > 8 ]] && size=8
		avail=$(df -BG --output=avail "$disk"2 | tail -n1)
		if [[ $((size * 8)) < ${avail%G*} ]]; then
			truncate -s 0 "$swapfile"
			fallocate -l "$size"G "$swapfile"
			chmod 0600 "$swapfile"
			mkswap "$swapfile"
			swapon "$swapfile"
		fi
	fi

	# 修改pacstrap脚本, 支持复制第三方源镜像列表和强行覆盖文件
	sed -i 's#/mirrorlist#/*#g' /usr/bin/pacstrap
	sed -i -E 's/(pacman_args=).*/\1(--overwrite "*")/' /usr/bin/pacstrap

	keys=(	0706B90D37D9B881 	# alhp & chaotic-aur
		250A4BA6630FD7F1  	# selinux
		7533BAFE69A25079  	# blackarch
		7931B6D628C8D3BA 	# arch4edu
		F3B607488DB35A47)	# cachyos

	keyrings=(	'arch4edu-keyring'
			'archlinuxcn-keyring'
			'blackarch-keyring'
			'cachyos-keyring'
			'chaotic-keyring')

	mirrorlists=(	'archlinuxcn-mirrorlist-git'
			'blackarch-mirrorlist'
			'cachyos-mirrorlist'
			'chaotic-mirrorlist'
			'mirrorlist.arch4edu')

	cp -fv {,/}etc/pacman.conf
	v=$(/usr/lib/ld-linux-x86-64.so.2 --help | grep -Po '(?<=x86-64-v).(?= \(supported)')
	if [[ $v =~ 4 ]]; then
		mirrorlists+='cachyos-v4-mirrorlist'
		cat etc/pacman_v4.conf >> /etc/pacman.conf
	fi
	if [[ $v =~ 3 ]]; then
		keyrings+='alhp-keyring'
		mirrorlists+=(	'alhp-mirrorlist'
				'cachyos-v3-mirrorlist')
		cat etc/pacman_v3.conf >> /etc/pacman.conf
	fi
	cat etc/pacman_baseline.conf >> /etc/pacman.conf

	# 密钥环初始化
	pacman-key --init
	pacman-key --keyserver keyserver.ubuntu.com -r $keys
	pacman-key --lsign-key $keys
	pacman-key --populate

	# 准备镜像列表
	pacman -S --needed --noconfirm pacman-contrib
	cp -vfr etc/pacman.d/* /etc/pacman.d/
	pacman -Sy --needed --noconfirm --overwrite "*" $keyrings
	sed -i -E '/^SigLevel = TrustAll$/d' /etc/pacman.conf
	pacman -Sy --needed --noconfirm --overwrite "*" $mirrorlists

	# 安装
	pacstrap -P /mnt keyrings mirrorlists $(<packages.txt) || exit 1

	# 创建分区表
	genfstab -L /mnt | sed -E '/^(#.*)?$/d' >>/mnt/etc/fstab &

	# 硬件时间
	hwclock --systohc --adjfile /mnt/etc/adjtime &

	# 还原dotfiles
	cp -v /mnt/etc/pacman.conf{,.bak}
	cp -vfr etc/* /mnt/etc/
	mv -vf /mnt/etc/pacman.conf{.bak,}
	rm -vf /mnt/etc/pacman_*.conf

	arch-chroot /mnt sh -c '\
		mkinitcpio -P && \
		useradd -m -G wheel -s /usr/bin/zsh n0tr00t'
	sed -E "s#^(n0tr00t:)[^:]+#\1$(openssl passwd -1 -salt 14514 -stdin <<< 1919810)#" /mnt/etc/shadow
	ln -sv /usr/bin/nvim /mnt/usr/bin/vi
	for service in 'dhcpcd' 'seatd' 'rngd'
	do
		ln -sv /usr/lib/systemd/system/$service.service \
		       /mnt/etc/systemd/system/multi-user.target.wants/$service.service &
	done

	# TODO: UEFI安全启动
	#uuidgen --random > GUID.txt
	#for key in "PK" "KEK" "db"
	#do
	#	openssl req -newkey rsa:4096 -nodes -keyout $key.key -new -x509 -sha512 -days 3650 -subj '/CN=12339/' -out $key.crt
	#	openssl x509 -outform DER -in $key.crt -out $key.cer
	#	cert-to-efi-sig-list -g "$(< GUID.txt)" $key.crt $key.esl
	#done
	#sign-efi-sig-list -g "$(< GUID.txt)" -k PK.key -c PK.crt PK PK.esl PK.auth
	#sign-efi-sig-list -g "$(< GUID.txt)" -k PK.key -c PK.crt KEK KEK.esl KEK.auth
	#sign-efi-sig-list -g "$(< GUID.txt)" -k KEK.key -c KEK.crt db db.esl db.auth
	#sbsign --key db.key --cert db.crt --output /boot/vmlinuz-linux-zen{,}
	#sbsign --key db.key --cert db.crt --output /boot/Shell_x64.efi{,}

	# 配置引导
	efibootmgr \
		| grep -Po '(?<=Boot)....(?=\*? ((Boot with ((standard)|(fallback)|(minimal)) options)|(UEFI Shell)))' \
		| xargs -P$nproc -i efibootmgr -Bb {}

	efibootmgr \
		| grep -i 'Shell' \
		| grep -v 'UEFI Shell' \
		|| efibootmgr -c -d "$disk" -L 'UEFI Shell' -l Shell.efi -u

	efibootmgr -c -d "$disk" -L 'Boot with minimal options' -l vmlinuz-linux-zen -u \
		'root='"$disk"'2 rootflags=subvol=@ rw'\
		'usr='"$disk"'2 usrflags=subvol=@usr rw'\
		'initrd=initramfs-linux-zen.img'

	efibootmgr -c -d "$disk" -L 'Boot with fallback options' -l vmlinuz-linux-zen -u \
		'root='"$disk"'2 rootflags=subvol=@ rw'\
		'usr='"$disk"'2 usrflags=subvol=@usr rw'\
		'lsm=landlock,lockdown,yama,integrity,selinux,bpf'\
		'initrd=amd-ucode.img initrd=initramfs-linux-zen-fallback.img'

	efibootmgr -c -d "$disk" -L 'Boot with standard options' -l vmlinuz-linux-zen -u \
		'root='"$disk"'2 rootflags=subvol=@ rw'\
		'usr='"$disk"'2 usrflags=subvol=@usr rw'\
		'lsm=landlock,lockdown,yama,integrity,selinux,bpf'\
		'initrd=amd-ucode.img initrd=initramfs-linux-zen.img'

	efibootmgr -a -b $(efibootmgr | grep -Pom 1 '(?<=Boot)....(?=\*? Boot with standard options)')

	arch-chroot sudo -u n0tr00t "$(dirname "$(readlink -f $0)")"/user
	[ -f "$swapfile" ] && swapoff -v "$swapfile"
	umount -Rv /mnt
	reboot
fi
